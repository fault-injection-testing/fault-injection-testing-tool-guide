from(bucket: "jmeter")
|> range(start: v.timeRangeStart, stop: v.timeRangeStop)
|> filter(fn: (r) => r._measurement == "jmeter" and r._field == "ttfb")
|> keep(columns: ["_time", "_value", "status", "transaction"])
|> pivot(rowKey: ["_time"], columnKey: ["status"], valueColumn: "_value")
|> map(fn: (r) => ({r with ok: if exists r.ok then 1 else 0}))
|> map(fn: (r) => ({r with ko: if exists r.ko then 1 else 0}))
|> window(every: ${aggregation}s)
|> reduce(fn: (r, accumulator) => ({count_ok: r.ok + accumulator.count_ok, count_ko: r.ko + accumulator.count_ko}), identity: {count_ok: 0, count_ko: 0})
|> map(fn: (r) => ({r with _value: (float(v: r.count_ko) / float(v: r.count_ok + r.count_ko)) * float(v: 100)}))
|> duplicate(column: "_stop", as: "_time")
|> drop(columns: ["count_ok", "count_ko"])
|> window(every: inf)
